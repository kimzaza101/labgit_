{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gkAU-xV_kVIU"
      },
      "source": [
        "# Lab: Refactoring for Better Class Design\n",
        "\n",
        "Objectives\n",
        "\n",
        "\n",
        "1.   Improve cohesion by ensuring each class has a single, clear responsibility.\n",
        "2.   Reduce coupling to minimize dependencies between classes.\n",
        "3. Apply refactoring techniques to make the code more maintainable.\n",
        "4. Use Representation-Driven Design (RDD) by utilizing private variables and controlled access.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {
        "id": "VYBDnZcAkD4Z"
      },
      "outputs": [],
      "source": [
        "class GameCharacter:\n",
        "    def __init__(self, name, hp, attack, defense, gold, inventory, level, experience, quests):\n",
        "        self.name = name\n",
        "        self.hp = hp\n",
        "        self.attack = attack\n",
        "        self.defense = defense\n",
        "        self.gold = gold\n",
        "        self.inventory = inventory\n",
        "        self.level = level\n",
        "        self.experience = experience\n",
        "        self.quests = quests\n",
        "\n",
        "    def attack_enemy(self, enemy):\n",
        "        damage = self.attack - enemy.defense\n",
        "        if damage > 0:\n",
        "            enemy.hp -= damage\n",
        "        print(f\"{self.name} attacks {enemy.name} for {damage} damage!\")\n",
        "\n",
        "    def buy_item(self, item, price):\n",
        "        if self.gold >= price:\n",
        "            self.gold -= price\n",
        "            self.inventory.append(item)\n",
        "            print(f\"{self.name} bought {item}!\")\n",
        "        else:\n",
        "            print(f\"{self.name} doesn't have enough gold!\")\n",
        "\n",
        "    def display_status(self):\n",
        "        print(f\"Name: {self.name}, HP: {self.hp}, Attack: {self.attack}, Defense: {self.defense}, Gold: {self.gold}, Level: {self.level}, Experience: {self.experience}\")\n",
        "\n",
        "    def gain_experience(self, points):\n",
        "        self.experience += points\n",
        "        if self.experience >= 100:\n",
        "            self.level_up()\n",
        "\n",
        "    def level_up(self):\n",
        "        self.level += 1\n",
        "        self.attack += 5\n",
        "        self.defense += 3\n",
        "        self.hp += 10\n",
        "        print(f\"{self.name} leveled up to level {self.level}!\")\n",
        "\n",
        "    def complete_quest(self, quest):\n",
        "        if quest not in self.quests:\n",
        "            self.quests.append(quest)\n",
        "            print(f\"{self.name} completed quest: {quest}!\")\n",
        "        else:\n",
        "            print(f\"{self.name} already completed this quest.\")\n",
        "\n",
        "    def buy_armor(self, armor, price):\n",
        "        if self.gold >= price:\n",
        "            self.gold -= price\n",
        "            self.inventory.append(armor)\n",
        "            print(f\"{self.name} bought armor: {armor}!\")\n",
        "        else:\n",
        "            print(f\"{self.name} doesn't have enough gold for armor!\")\n",
        "\n",
        "    def use_potion(self, potion):\n",
        "        if potion in self.inventory:\n",
        "            self.hp += 20\n",
        "            self.inventory.remove(potion)\n",
        "            print(f\"{self.name} used a {potion} potion!\")\n",
        "        else:\n",
        "            print(f\"{self.name} doesn't have a {potion} potion!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3RzRttMFkxNX"
      },
      "source": [
        "What's the problem of the code above?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "id": "EKElSbXmlCL4"
      },
      "outputs": [],
      "source": [
        "#ใน GameCharacter มี method ที่ไม่ได้ใช้งาน คือ attack_enemy, buy_item, buy_armor, use_potion และ complete_quest \n",
        "#ซึ่งควรจะอยู่ใน class อื่นๆที่เหมาะสมกว่า และเพื่อให้ code ดูสะอาดขึ้น และเพื่อให้ code มีความยืดหยุ่นมากขึ้น\n",
        "#เราจะสร้าง class ใหม่เพื่อเก็บ method ที่ไม่ได้ใช้งานเหล่านั้น โดยใช้การสืบทอดคุณสมบัติจาก GameCharacter"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YoHUvxGYtBP0"
      },
      "source": [
        "## What's your solution to modify the code?\n",
        "\n",
        "Hint: The modified version should contain 3 - 4 classes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "id": "D516rZvotJ6H"
      },
      "outputs": [],
      "source": [
        "#สร้าง class ใหม่ชื่อว่า CharacterAction โดยสืบทอดคุณสมบัติจาก GameCharacter โดยทำหน้าที่ควบคุมการกระทำของตัวละคร\n",
        "#โดยมี method ดังนี้\n",
        "#1. attack_enemy(self, enemy) ทำหน้าที่โจมตีศัตรู\n",
        "#2. buy_item(self, item, price) ทำหน้าที่ซื้อไอเทม\n",
        "#3. buy_armor(self, armor, price) ทำหน้าที่ซื้อเกราะ\n",
        "#4. use_potion(self, potion) ทำหน้าที่ใช้ยา\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า CharacterQuest โดยสืบทอดคุณสมบัติจาก GameCharacter โดยทำหน้าที่ควบคุมเควสของตัวละคร\n",
        "#โดยมี method ดังนี้\n",
        "#1. complete_quest(self, quest) ทำหน้าที่เสร็จเควส\n",
        "#2. quest_list(self) ทำหน้าที่แสดงเควสที่ตัวละครมี\n",
        "#3. quest (self, quest) ทำหน้าที่เพิ่มเควส\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า CharacterStatus โดยสืบทอดคุณสมบัติจาก GameCharacter โดยทำหน้าที่แสดงสถานะของตัวละคร\n",
        "#โดยมี method ดังนี้\n",
        "#1. display_status(self) ทำหน้าที่แสดงสถานะของตัวละคร\n",
        "#2. display_inventory(self) ทำหน้าที่แสดงไอเทมที่ตัวละครมี\n",
        "#3. Update_status(self) ทำหน้าที่อัพเดทสถานะของตัวละคร\n",
        "#4. Update_inventory(self) ทำหน้าที่อัพเดทไอเทมของตัวละคร\n",
        "#5. Update_gold(self) ทำหน้าที่อัพเดทเงินของตัวละคร\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า CharacterLevel โดยสืบทอดคุณสมบัติจาก GameCharacter โดยทำหน้าที่ควบคุมเลเวลของตัวละคร\n",
        "#โดยมี method ดังนี้\n",
        "#1. gain_experience(self, points) ทำหน้าที่เพิ่มประสบการณ์\n",
        "#2. level_up(self) ทำหน้าที่เพิ่มเลเวล\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า shop โดยมี method ดังนี้\n",
        "#1. buy_item(self, item, price) ทำหน้าที่ซื้อไอเทม\n",
        "#2. buy_armor(self, armor, price) ทำหน้าที่ซื้อเกราะ\n",
        "#3. item_list(self) ทำหน้าที่แสดงไอเทมที่ขาย\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า enemy โดยมี method ดังนี้\n",
        "#1. enemy_random(self) ทำหน้าที่สร้างศัตรูสุ่ม\n",
        "#2. enemy_list(self) ทำหน้าที่แสดงศัตรูที่มี\n",
        "#3. enemy(self, enemy) ทำหน้าที่เพิ่มศัตรู\n",
        "#4. enemy_status(self) ทำหน้าที่กำหนดสถานะของศัตรู\n",
        "#5. enemy_attack(self, name) ทำหน้าที่โจมตีตัวละคร\n",
        "\n",
        "#สร้าง class ใหม้่ชื่อว่า map โดยมี method ดังนี้\n",
        "#1. map_list(self) ทำหน้าที่แสดงแผนที่\n",
        "#2. move(self, location) ทำหน้าที่เลือกที่ตั้ง\n",
        "#3. location(self) ทำหน้าที่แสดงที่ตั้ง\n",
        "#4. location_list(self) ทำหน้าที่แสดงที่ตั้งที่มี\n",
        "#5. enemy_location(self) ทำหน้าที่แสดงที่ตั้งของศัตรู\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า Game โดยมี method ดังนี้\n",
        "#1. start(self) ทำหน้าที่เริ่มเกม\n",
        "#2. end(self) ทำหน้าที่จบเกม\n",
        "#3. game_over(self) ทำหน้าที่จบเกม\n",
        "#4. randomevent(self) ทำหน้าที่สุ่มเหตุการณ์\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า Game_time โดยมี method ดังนี้\n",
        "#1. time(self) ทำหน้าที่แสดงเวลา\n",
        "#2. time_list(self) ทำหน้าที่แสดงเวลาที่มี\n",
        "#3. time_move(self) ทำหน้าที่เลื่อนเวลา\n",
        "\n",
        "#สร้าง class ใหม่ชื่อว่า GameCharacter โดยสืบทอดคุณสมบัติจาก GameCharacter โดยทำหน้าที่สร้างตัวละคร\n",
        "#โดยมี method ดังนี้\n",
        "#1. character_class(self) ทำหน้าที่เลือกคลาสของตัวละคร\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "33deEtYdl8uy"
      },
      "source": [
        "## Refactor the code using good class design principle."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Class GameCharacter"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {
        "id": "TG5K1NO7l_JE"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "\n",
        "class GameCharacter:\n",
        "    def __init__(self, name):\n",
        "        self.name = input(\"Enter your name: \")\n",
        "        self.Max_hp = random.randint(50, 100)\n",
        "        self.hp = self.Max_hp\n",
        "        self.attack = random.randint(10, 20)\n",
        "        self.defense = random.randint(5, 10)\n",
        "        self.gold = 100\n",
        "        self.inventory = []  # Inventory สำหรับเก็บไอเท็ม\n",
        "        self.max_weight = 100  # น้ำหนักสูงสุดที่ผู้เล่นสามารถแบกได้\n",
        "        self.current_weight = 0  # น้ำหนักปัจจุบัน\n",
        "        self.level = 1\n",
        "        self.Max_experience = 100\n",
        "        self.experience = 0\n",
        "        self.quests = []\n",
        "        self.Max_mana = random.randint(50, 100)\n",
        "        self.mana = self.Max_mana\n",
        "        self.magic_attack = random.randint(10, 20)\n",
        "        self.Max_stamina = random.randint(50, 100)\n",
        "        self.luck = random.randint(1, 10)  # ค่า Luck สำหรับโอกาสคริติคอล\n",
        "        self.stamina = self.Max_stamina\n",
        "        self.time = 0  # เวลาในเกม (หน่วย: ชั่วโมง)\n",
        "\n",
        "        self.CharacterClass = self.assign_class()\n",
        "        self.CharacterClass.apply_bonus(self)  \n",
        "\n",
        "        print(f\"{self.name} created as {self.CharacterClass.name}!\")\n",
        "        self.status = CharacterStatus(self)\n",
        "        self.status.display_status()  \n",
        "\n",
        "    def assign_class(self):\n",
        "        if self.Max_hp == 100 and self.defense > 8:\n",
        "            return Paladin()  \n",
        "        elif self.magic_attack >= 20 and self.mana >= 100:\n",
        "            return Archmage()  \n",
        "        elif self.stamina >= 95 and self.attack >= 18:\n",
        "            return Assassin()  \n",
        "        elif self.Max_hp == 100 and self.Max_mana == 100 and self.Max_stamina == 100 and self.luck == 10:\n",
        "            return ChosenOne()  \n",
        "\n",
        "        if self.attack > 17 and self.hp > 80:\n",
        "            return Warrior()\n",
        "        elif self.magic_attack > 15 and self.mana > 70:\n",
        "            return Mage()\n",
        "        elif self.stamina > 80 and self.attack > 12:\n",
        "            return Rogue()\n",
        "        else:\n",
        "            return Adventurer()\n",
        "\n",
        "    \n",
        "    def add_time(self, hours):\n",
        "        \"\"\"เพิ่มเวลาในเกม\"\"\"\n",
        "        self.time += hours\n",
        "        print(f\"Time passed: {hours} hours\")\n",
        "\n",
        "    def add_item(self, item):\n",
        "        if self.current_weight + item.weight <= self.max_weight:\n",
        "            self.inventory.append(item)\n",
        "            self.current_weight += item.weight\n",
        "        else:\n",
        "            print(\"Inventory is full!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Class CharacterStatus"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {},
      "outputs": [],
      "source": [
        "class CharacterStatus:\n",
        "    def __init__(self, character):\n",
        "        self.character = character  \n",
        "\n",
        "    def display_status(self):\n",
        "        print(self)  \n",
        "\n",
        "    def __str__(self):\n",
        "        char = self.character\n",
        "        return f\"\"\"{\"*\"*60}\n",
        "Name    : {char.name:11}   | class   : {char.CharacterClass.name}\n",
        "HP      : {char.hp:4} / {char.Max_hp:4}   | Stamina : {char.stamina} / {char.Max_stamina}\n",
        "Mana    : {char.mana:4} / {char.Max_mana:4}   | Magic Attack : {char.magic_attack}\n",
        "Attack  : {char.attack:4}          | Defense : {char.defense}\n",
        "Level   : {char.level:3}           | Exp     : {char.experience} / {char.Max_experience} to level {char.level+1}\n",
        "Gold    : {char.gold:7}       | Luck    : {char.luck}\n",
        "{\"*\"*60}\"\"\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Class  CharacterClass"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {},
      "outputs": [],
      "source": [
        "class CharacterClass:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "        self.bonus_hp = 0\n",
        "        self.bonus_attack = 0\n",
        "        self.bonus_defense = 0\n",
        "        self.bonus_mana = 0\n",
        "        self.bonus_magic_attack = 0\n",
        "        self.bonus_stamina = 0\n",
        "        self.bonus_luck = 0\n",
        "        # การเติบโตของค่าพลังต่อเลเวล\n",
        "        self.growth = {\n",
        "            \"hp\": 0,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 0\n",
        "        }\n",
        "\n",
        "    def apply_bonus(self, character):\n",
        "        \"\"\"เพิ่มโบนัสค่าพลังให้ตัวละคร\"\"\"\n",
        "        character.hp += self.bonus_hp\n",
        "        character.Max_hp += self.bonus_hp\n",
        "        character.attack += self.bonus_attack\n",
        "        character.defense += self.bonus_defense\n",
        "        character.mana += self.bonus_mana\n",
        "        character.Max_mana += self.bonus_mana\n",
        "        character.magic_attack += self.bonus_magic_attack\n",
        "        character.stamina += self.bonus_stamina\n",
        "        character.Max_stamina += self.bonus_stamina\n",
        "        character.luck += self.bonus_luck\n",
        "\n",
        "\n",
        "# คลาสอาชีพปกติ\n",
        "class Warrior(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Warrior\")\n",
        "        self.bonus_hp = 20\n",
        "        self.bonus_attack = 5\n",
        "        self.bonus_defense = 3\n",
        "        self.growth = {\n",
        "            \"hp\": 15,\n",
        "            \"attack\": 5,\n",
        "            \"defense\": 5,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 5\n",
        "        }\n",
        "\n",
        "class Mage(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Mage\")\n",
        "        self.bonus_mana = 30\n",
        "        self.bonus_magic_attack = 8\n",
        "        self.growth = {\n",
        "            \"hp\": 5,\n",
        "            \"attack\": 1,\n",
        "            \"defense\": 1,\n",
        "            \"mana\": 10,\n",
        "            \"magic_attack\": 5,\n",
        "            \"stamina\": 1\n",
        "        }\n",
        "\n",
        "class Rogue(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Rogue\")\n",
        "        self.bonus_stamina = 20\n",
        "        self.bonus_attack = 4\n",
        "        self.bonus_luck = 1\n",
        "        self.growth = {\n",
        "            \"hp\": 10,\n",
        "            \"attack\": 10,\n",
        "            \"defense\": 2,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 10\n",
        "        }\n",
        "\n",
        "class Adventurer(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Adventurer\")\n",
        "        self.bonus_hp = 10\n",
        "        self.bonus_attack = 2\n",
        "        self.bonus_defense = 1\n",
        "        self.bonus_mana = 10\n",
        "        self.bonus_magic_attack = 2\n",
        "        self.bonus_stamina = 10\n",
        "        self.growth = {\n",
        "            \"hp\": 8,\n",
        "            \"attack\": 3,\n",
        "            \"defense\": 2,\n",
        "            \"mana\": 5,\n",
        "            \"magic_attack\": 2,\n",
        "            \"stamina\": 5\n",
        "        }\n",
        "\n",
        "# อาชีพลับ\n",
        "class Paladin(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Paladin\")\n",
        "        self.bonus_hp = 25\n",
        "        self.bonus_defense = 5\n",
        "        self.bonus_mana = 15\n",
        "        self.growth = {\n",
        "            \"hp\": 15,\n",
        "            \"attack\": 5,\n",
        "            \"defense\": 3,\n",
        "            \"mana\": 4,\n",
        "            \"magic_attack\": 5,\n",
        "            \"stamina\": 1\n",
        "        }\n",
        "\n",
        "class Archmage(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Archmage\")\n",
        "        self.bonus_mana = 50\n",
        "        self.bonus_magic_attack = 15\n",
        "        self.growth ={\n",
        "            \"hp\": 5,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 15,\n",
        "            \"magic_attack\": 15,\n",
        "            \"stamina\": 1\n",
        "        }\n",
        "\n",
        "class Assassin(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Assassin\")\n",
        "        self.bonus_stamina = 40\n",
        "        self.bonus_attack = 7\n",
        "        self.growth ={\n",
        "            \"hp\": 15,\n",
        "            \"attack\": 10,\n",
        "            \"defense\": 2,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 5\n",
        "        }\n",
        "\n",
        "class ChosenOne(CharacterClass):\n",
        "    def __init__(self):\n",
        "        super().__init__(\"Chosen One\")\n",
        "        self.bonus_hp = 50\n",
        "        self.bonus_mana = 50\n",
        "        self.bonus_stamina = 50\n",
        "        self.bonus_attack = 10\n",
        "        self.bonus_defense = 5\n",
        "        self.bonus_magic_attack = 10\n",
        "        self.bonus_luck = 5\n",
        "        self.growth ={\n",
        "            \"hp\": 20,\n",
        "            \"attack\": 10,\n",
        "            \"defense\": 5,\n",
        "            \"mana\": 10,\n",
        "            \"magic_attack\": 5,\n",
        "            \"stamina\": 10\n",
        "        }\n",
        "\n",
        "# อาชีพขั้น 2\n",
        "class Knight(Warrior):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Knight\"\n",
        "        self.bonus_hp = 30\n",
        "        self.bonus_attack = 7\n",
        "        self.bonus_defense = 5\n",
        "        self.growth ={\n",
        "            \"hp\": 20,\n",
        "            \"attack\": 15,\n",
        "            \"defense\": 10,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 15\n",
        "        }\n",
        "\n",
        "class Wizard(Mage):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Wizard\"\n",
        "        self.bonus_mana = 50\n",
        "        self.bonus_magic_attack = 10\n",
        "        self.growth ={\n",
        "            \"hp\": 5,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 30,\n",
        "            \"magic_attack\": 20,\n",
        "            \"stamina\": 5\n",
        "        }\n",
        "\n",
        "class Thief(Rogue):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Thief\"\n",
        "        self.bonus_stamina = 30\n",
        "        self.bonus_attack = 6\n",
        "        self.growth ={\n",
        "            \"hp\": 15,\n",
        "            \"attack\": 35,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 20\n",
        "        }\n",
        "\n",
        "class Explorer(Adventurer):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Explorer\"\n",
        "        self.bonus_hp = 15\n",
        "        self.bonus_attack = 3\n",
        "        self.bonus_defense = 2\n",
        "        self.bonus_mana = 15\n",
        "        self.bonus_magic_attack = 3\n",
        "        self.bonus_stamina = 15\n",
        "        self.bonus_luck = 5\n",
        "        self.growth ={\n",
        "            \"hp\": 20,\n",
        "            \"attack\": 10,\n",
        "            \"defense\": 5,\n",
        "            \"mana\": 5,\n",
        "            \"magic_attack\": 5,\n",
        "            \"stamina\": 15\n",
        "        }\n",
        "\n",
        "# อาชีพลับขั้น 2\n",
        "class Crusader(Paladin):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Crusader\"\n",
        "        self.bonus_hp = 35\n",
        "        self.bonus_defense = 7\n",
        "        self.bonus_mana = 20\n",
        "        self.growth ={\n",
        "            \"hp\": 20,\n",
        "            \"attack\": 10,\n",
        "            \"defense\": 5,\n",
        "            \"mana\": 10,\n",
        "            \"magic_attack\": 10,\n",
        "            \"stamina\": 5\n",
        "        }\n",
        "\n",
        "class Warlock(Archmage):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Warlock\"\n",
        "        self.bonus_mana = 60\n",
        "        self.bonus_magic_attack = 20\n",
        "        self.growth ={\n",
        "            \"hp\": 0,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 30,\n",
        "            \"magic_attack\": 30,\n",
        "            \"stamina\": 0\n",
        "        }\n",
        "\n",
        "class Shadow(Assassin):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Shadow\"\n",
        "        self.bonus_stamina = 45\n",
        "        self.bonus_attack = 8\n",
        "        self.growth ={\n",
        "            \"hp\": 10,\n",
        "            \"attack\": 30,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 20\n",
        "        }\n",
        "\n",
        "class ShadowReaper(ChosenOne):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Shadow Reaper\"\n",
        "        self.bonus_hp = 75\n",
        "        self.bonus_mana = 75\n",
        "        self.bonus_stamina = 75\n",
        "        self.bonus_attack = 20\n",
        "        self.bonus_defense = 10\n",
        "        self.bonus_magic_attack = 12\n",
        "        self.bonus_luck = 10\n",
        "        self.growth ={\n",
        "            \"hp\": 50,\n",
        "            \"attack\": 50,\n",
        "            \"defense\": 20,\n",
        "            \"mana\": 50,\n",
        "            \"magic_attack\": 30,\n",
        "            \"stamina\": 50\n",
        "        }\n",
        "\n",
        "# อาชีพขั้น 3\n",
        "class Champion(Knight):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Champion\"\n",
        "        self.bonus_hp = 100\n",
        "        self.bonus_attack = 75\n",
        "        self.bonus_defense = 25\n",
        "        self.growth ={\n",
        "            \"hp\": 30,\n",
        "            \"attack\": 50,\n",
        "            \"defense\": 25,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 0,\n",
        "            \"stamina\": 25\n",
        "        }\n",
        "\n",
        "class Archwizard(Wizard):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Archwizard\"\n",
        "        self.bonus_mana = 100\n",
        "        self.bonus_magic_attack = 100\n",
        "        self.growth ={\n",
        "            \"hp\": 0,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 50,\n",
        "            \"magic_attack\": 80,\n",
        "            \"stamina\": 0\n",
        "        }\n",
        "\n",
        "class MasterThief(Thief):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Master Thief\"\n",
        "        self.bonus_stamina = 100\n",
        "        self.bonus_attack = 100\n",
        "        self.growth ={\n",
        "            \"hp\": 0,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 30,\n",
        "            \"magic_attack\": 30,\n",
        "            \"stamina\": 0\n",
        "        }\n",
        "\n",
        "class Legend(Explorer):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Legend\"\n",
        "        self.bonus_hp = 50\n",
        "        self.bonus_attack = 50\n",
        "        self.bonus_defense = 10\n",
        "        self.bonus_mana = 50\n",
        "        self.bonus_magic_attack = 20\n",
        "        self.bonus_stamina = 25\n",
        "        self.bonus_luck = 30\n",
        "        self.growth ={\n",
        "            \"hp\": 10,\n",
        "            \"attack\": 30,\n",
        "            \"defense\": 30,\n",
        "            \"mana\": 30,\n",
        "            \"magic_attack\": 30,\n",
        "            \"stamina\": 30\n",
        "        }\n",
        "\n",
        "# อาชีพลับขั้น 3\n",
        "class HolyKnight(Crusader):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Holy Knight\"\n",
        "        self.bonus_hp = 150\n",
        "        self.bonus_defense = 25\n",
        "        self.bonus_mana = 50 \n",
        "        self.growth ={\n",
        "            \"hp\": 30,\n",
        "            \"attack\": 25,\n",
        "            \"defense\": 25,\n",
        "            \"mana\": 25,\n",
        "            \"magic_attack\": 25,\n",
        "            \"stamina\": 0\n",
        "        }\n",
        "\n",
        "class ArchmageWarlock(Warlock):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Archmage Warlock\"\n",
        "        self.bonus_mana = 75\n",
        "        self.bonus_magic_attack = 175\n",
        "        self.growth ={\n",
        "            \"hp\": 0,\n",
        "            \"attack\": 0,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 70,\n",
        "            \"magic_attack\": 70,\n",
        "            \"stamina\": 0\n",
        "        }\n",
        "\n",
        "class DeathShadow(Shadow):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Death Shadow\"\n",
        "        self.bonus_stamina = 50\n",
        "        self.bonus_attack = 9\n",
        "        self.growth ={\n",
        "            \"hp\": 10,\n",
        "            \"attack\": 80,\n",
        "            \"defense\": 0,\n",
        "            \"mana\": 0,\n",
        "            \"magic_attack\": 70,\n",
        "            \"stamina\": 50\n",
        "        }\n",
        "\n",
        "class ShadowEmperor(ShadowReaper):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.name = \"Shadow Emperor\"\n",
        "        self.bonus_hp = 100\n",
        "        self.bonus_mana = 100\n",
        "        self.bonus_stamina = 100\n",
        "        self.bonus_attack = 99\n",
        "        self.bonus_defense = 50\n",
        "        self.bonus_magic_attack = 75\n",
        "        self.bonus_luck = 12\n",
        "        self.growth ={\n",
        "            \"hp\": 100,\n",
        "            \"attack\": 100,\n",
        "            \"defense\": 50,\n",
        "            \"mana\": 300,\n",
        "            \"magic_attack\": 75,\n",
        "            \"stamina\": 0\n",
        "        }\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Class CharacterAction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {},
      "outputs": [],
      "source": [
        "class CharacterAction():\n",
        "    # def __init__(self, name):\n",
        "    #     super().__init__(name)\n",
        "\n",
        "\n",
        "    def attack_enemy(self, enemy):\n",
        "        damage = self.attack - enemy.defense\n",
        "        if damage > 0:\n",
        "            enemy.hp -= damage\n",
        "        print(f\"{self.name} attacks {enemy.name} for {damage} damage!\")\n",
        "\n",
        "    def buy_item(self, item, price):\n",
        "        if self.gold >= price:\n",
        "            self.gold -= price\n",
        "            self.inventory.append(item)\n",
        "            print(f\"{self.name} bought {item}!\")\n",
        "        else:\n",
        "            print(f\"{self.name} doesn't have enough gold!\")\n",
        "\n",
        "    def buy_armor(self, armor, price):\n",
        "        if self.gold >= price:\n",
        "            self.gold -= price\n",
        "            self.inventory.append(armor)\n",
        "            print(f\"{self.name} bought armor: {armor}!\")\n",
        "        else:\n",
        "            print(f\"{self.name} doesn't have enough gold for armor!\")\n",
        "\n",
        "    def use_potion(self, potion):\n",
        "        if potion in self.inventory:\n",
        "            self.hp += 20\n",
        "            self.inventory.remove(potion)\n",
        "            print(f\"{self.name} used a {potion} potion!\")\n",
        "        else:\n",
        "            print(f\"{self.name} doesn't have a {potion} potion!\")\n",
        "\n",
        "    def calculate_critical(self):\n",
        "        \"\"\"คำนวณโอกาสคริติคอล\"\"\"\n",
        "        base_critical_chance = 0.05  # โอกาสคริติคอลพื้นฐาน 5%\n",
        "        critical_chance = base_critical_chance + (self.luck / 100)  # เพิ่มโอกาสตามค่า Luck\n",
        "        return random.random() < critical_chance  # สุ่มว่าคริติคอลหรือไม่\n",
        "\n",
        "    def attack_enemy(self, enemy):\n",
        "        \"\"\"โจมตีศัตรูและคำนวณความเสียหาย\"\"\"\n",
        "        if self.calculate_critical():\n",
        "            damage = int(self.attack * 1.5)  # ความเสียหายคริติคอล 1.5 เท่า\n",
        "            print(f\"Critical hit! {self.name} deals {damage} damage!\")\n",
        "        else:\n",
        "            damage = self.attack\n",
        "            print(f\"{self.name} attacks {enemy.name} for {damage} damage!\")\n",
        "        return damage\n",
        "\n",
        "    def take_damage(self, damage):\n",
        "        \"\"\"รับความเสียหายและคำนวณ HP ที่เหลือ\"\"\"\n",
        "        damage_taken = max(0, damage - self.defense)  # ลดความเสียหายด้วย Defense\n",
        "        self.hp -= damage_taken\n",
        "        if self.hp < 0:\n",
        "            self.hp = 0\n",
        "        print(f\"{self.name} took {damage_taken} damage! ({self.hp}/{self.Max_hp} HP remaining)\")\n",
        "        return self.hp <= 0  # คืนค่า True ถ้า HP <= 0 (ตัวละครตาย)\n",
        "\n",
        "    def use_stamina(self, amount):\n",
        "        \"\"\"ใช้พลังงาน\"\"\"\n",
        "        if self.stamina >= amount:\n",
        "            self.stamina -= amount\n",
        "            return True\n",
        "        else:\n",
        "            print(\"Not enough stamina!\")\n",
        "            return False\n",
        "\n",
        "    def rest(self):\n",
        "        \"\"\"พักฟื้นฟูพลังงาน\"\"\"\n",
        "        self.stamina = self.Max_stamina\n",
        "        self.hp = self.Max_hp\n",
        "        self.mana = self.Max_mana\n",
        "        self.time += 8  # พักฟื้น 8 ชั่วโมง\n",
        "        print(f\"You rested and recovered all HP, Mana, and Stamina. Time passed: 8 hours.\")\n",
        "\n",
        "    def attack_enemy(self, enemy):\n",
        "        damage = self.character.attack - enemy.defense\n",
        "        if damage > 0:\n",
        "            enemy.hp -= damage\n",
        "        print(f\"{self.character.name} attacks {enemy.name} for {damage} damage!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Class CharacterLevel"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {},
      "outputs": [],
      "source": [
        "class CharacterLevel:\n",
        "    def __init__(self, character):\n",
        "        self.character = character\n",
        "\n",
        "    def gain_experience(self, points):\n",
        "        self.character.experience += points\n",
        "        while self.character.experience >= self.character.Max_experience:\n",
        "            self.level_up()\n",
        "\n",
        "    def level_up(self):\n",
        "        self.character.level += 1\n",
        "        self.apply_class_growth()  # เรียกใช้การเติบโตตามคลาส\n",
        "        self.character.Max_experience = round(self.character.Max_experience * 1.25, 0) \n",
        "        self.character.experience -= self.character.Max_experience\n",
        "        if self.character.level % 5 == 0:\n",
        "            self.character.luck += 1\n",
        "        if self.character.experience <= 0:\n",
        "            self.character.experience = 0\n",
        "        print(f\"{self.character.name} leveled up to level {self.character.level}!\")\n",
        "        print(f\"{self.character.name} needs {self.character.experience} / {self.character.Max_experience} experience to level up again!\")\n",
        "\n",
        "        # ตรวจสอบการเปลี่ยนคลาสเมื่อถึงเลเวล 30 หรือ 60\n",
        "        if self.character.level == 30:\n",
        "            self.class_change_level_30()\n",
        "        elif self.character.level == 60:\n",
        "            self.class_change_level_60()\n",
        "\n",
        "    def apply_class_growth(self):\n",
        "        \"\"\"ปรับค่าพลังตามการเติบโตของคลาส\"\"\"\n",
        "        growth = self.character.CharacterClass.growth\n",
        "        self.character.Max_hp += growth[\"hp\"]\n",
        "        self.character.hp = self.character.Max_hp\n",
        "        self.character.attack += growth[\"attack\"]\n",
        "        self.character.defense += growth[\"defense\"]\n",
        "        self.character.Max_mana += growth[\"mana\"]\n",
        "        self.character.mana = self.character.Max_mana\n",
        "        self.character.magic_attack += growth[\"magic_attack\"]\n",
        "        self.character.Max_stamina += growth[\"stamina\"]\n",
        "        self.character.stamina = self.character.Max_stamina\n",
        "\n",
        "    def class_change_level_30(self):\n",
        "        \"\"\"เปลี่ยนคลาสเมื่อถึงเลเวล 30\"\"\"\n",
        "        if isinstance(self.character.CharacterClass, Warrior):\n",
        "            self.character.CharacterClass = Knight()\n",
        "        elif isinstance(self.character.CharacterClass, Mage):\n",
        "            self.character.CharacterClass = Wizard()\n",
        "        elif isinstance(self.character.CharacterClass, Rogue):\n",
        "            self.character.CharacterClass = Thief()\n",
        "        elif isinstance(self.character.CharacterClass, Adventurer):\n",
        "            self.character.CharacterClass = Explorer()\n",
        "        elif isinstance(self.character.CharacterClass, Paladin):\n",
        "            self.character.CharacterClass = Crusader()\n",
        "        elif isinstance(self.character.CharacterClass, Archmage):\n",
        "            self.character.CharacterClass = Warlock()\n",
        "        elif isinstance(self.character.CharacterClass, Assassin):\n",
        "            self.character.CharacterClass = Shadow()\n",
        "        elif isinstance(self.character.CharacterClass, ChosenOne):\n",
        "            self.character.CharacterClass = ShadowReaper()\n",
        "\n",
        "        self.character.CharacterClass.apply_bonus(self.character)\n",
        "        print(f\"{self.character.name} has changed to {self.character.CharacterClass.name} at level 30!\")\n",
        "\n",
        "    def class_change_level_60(self):\n",
        "        \"\"\"เปลี่ยนคลาสเมื่อถึงเลเวล 60\"\"\"\n",
        "        if isinstance(self.character.CharacterClass, Knight):\n",
        "            self.character.CharacterClass = Champion()\n",
        "        elif isinstance(self.character.CharacterClass, Wizard):\n",
        "            self.character.CharacterClass = Archwizard()\n",
        "        elif isinstance(self.character.CharacterClass, Thief):\n",
        "            self.character.CharacterClass = MasterThief()\n",
        "        elif isinstance(self.character.CharacterClass, Explorer):\n",
        "            self.character.CharacterClass = Legend()\n",
        "        elif isinstance(self.character.CharacterClass, Crusader):\n",
        "            self.character.CharacterClass = HolyKnight()\n",
        "        elif isinstance(self.character.CharacterClass, Warlock):\n",
        "            self.character.CharacterClass = ArchmageWarlock()\n",
        "        elif isinstance(self.character.CharacterClass, Shadow):\n",
        "            self.character.CharacterClass = DeathShadow()\n",
        "        elif isinstance(self.character.CharacterClass, ShadowReaper):\n",
        "            self.character.CharacterClass = ShadowEmperor()\n",
        "\n",
        "        self.character.CharacterClass.apply_bonus(self.character)\n",
        "        print(f\"{self.character.name} has changed to {self.character.CharacterClass.name} at level 60!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### ClassEnemy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {},
      "outputs": [],
      "source": [
        "import random\n",
        "class Enemy:\n",
        "    def __init__(self, name, level, enemy_type, item_pool, spawn_time = \"Any\"):\n",
        "        self.name = name\n",
        "        self.level = level\n",
        "        self.enemy_type = enemy_type\n",
        "        self.Max_hp = random.randint(50, 100) * level\n",
        "        self.hp = self.Max_hp\n",
        "        self.attack = random.randint(10, 20) * level\n",
        "        self.defense = random.randint(5, 10) * level\n",
        "        self.gold = random.randint(10, 50) * level\n",
        "        self.experience = random.randint(20, 50) * level\n",
        "        self.item_pool = item_pool  # พูลไอเท็มของศัตรู\n",
        "        self.drops = self.get_random_drop()  # สุ่มของที่ดรอป\n",
        "        self.luck = random.randint(1, 10)  # ค่า Luck สำหรับโอกาสคริติคอล\n",
        "        self.spawn_time = spawn_time\n",
        "\n",
        "    def can_spawn(self, current_time):\n",
        "        \"\"\"ตรวจสอบว่าศัตรูสามารถปรากฏได้ในเวลาปัจจุบันหรือไม่\"\"\"\n",
        "        if self.spawn_time == \"Any\":\n",
        "            return True\n",
        "        elif self.spawn_time == \"Day\" and 6 <= current_time % 24 < 18:\n",
        "            return True\n",
        "        elif self.spawn_time == \"Night\" and (current_time % 24 < 6 or current_time % 24 >= 18):\n",
        "            return True\n",
        "        return False\n",
        "    \n",
        "    def calculate_critical(self):\n",
        "        \"\"\"คำนวณโอกาสคริติคอล\"\"\"\n",
        "        base_critical_chance = 0.05  # โอกาสคริติคอลพื้นฐาน 5%\n",
        "        critical_chance = base_critical_chance + (self.luck / 100)  # เพิ่มโอกาสตามค่า Luck\n",
        "        return random.random() < critical_chance  # สุ่มว่าคริติคอลหรือไม่\n",
        "\n",
        "    def attack_player(self, player):\n",
        "        \"\"\"ศัตรูโจมตีผู้เล่นและคำนวณความเสียหาย\"\"\"\n",
        "        if self.calculate_critical():\n",
        "            damage = int(self.attack * 1.5)  # ความเสียหายคริติคอล 1.5 เท่า\n",
        "            print(f\"Critical hit! {self.name} deals {damage} damage!\")\n",
        "        else:\n",
        "            damage = self.attack\n",
        "            print(f\"{self.name} attacks {player.name} for {damage} damage!\")\n",
        "        return damage\n",
        "\n",
        "    def get_random_drop(self):\n",
        "        \"\"\"สุ่มของที่ดรอปจากพูลไอเท็มของศัตรู\"\"\"\n",
        "        if self.item_pool:\n",
        "            item_name = random.choices(\n",
        "                list(self.item_pool.keys()), \n",
        "                weights=self.item_pool.values(), \n",
        "                k=1\n",
        "            )[0]\n",
        "            return items[item_name]  # คืนค่าไอเท็มจาก Dictionary items\n",
        "        return None\n",
        "\n",
        "    def take_damage(self, damage):\n",
        "        \"\"\"รับความเสียหายและคำนวณ HP ที่เหลือ\"\"\"\n",
        "        damage_taken = max(0, damage - self.defense)  # ลดความเสียหายด้วย Defense\n",
        "        self.hp -= damage_taken\n",
        "        if self.hp < 0:\n",
        "            self.hp = 0\n",
        "        print(f\"{self.name} took {damage_taken} damage! ({self.hp}/{self.Max_hp} HP remaining)\")\n",
        "        return self.hp <= 0  # คืนค่า True ถ้า HP <= 0 (ศัตรูตาย)\n",
        "\n",
        "    def is_alive(self):\n",
        "        \"\"\"ตรวจสอบว่าศัตรูยังมีชีวิตอยู่หรือไม่\"\"\"\n",
        "        return self.hp > 0\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"\"\"{\"*\"*60}\n",
        "Name    : {self.name:11}   | Level   : {self.level}\n",
        "Type    : {self.enemy_type:11} | HP      : {self.hp:4} / {self.Max_hp:4}\n",
        "Attack  : {self.attack:4}          | Defense : {self.defense}\n",
        "Gold    : {self.gold:7}       | Exp     : {self.experience}\n",
        "Drops   : {self.drops.name if self.drops else 'Nothing'}\n",
        "{\"*\"*60}\"\"\"\n",
        "\n",
        "\n",
        "# รายชื่อศัตรูและพูลไอเท็ม\n",
        "enemy_data = {\n",
        "    \"Goblin\": {\n",
        "        \"type\": \"Monster\",\n",
        "        \"item_pool\": {\n",
        "            \"Rare Herb\": 0.5,  # 50% โอกาสดรอป\n",
        "            \"Beast Hide\": 0.3,  # 30% โอกาสดรอป\n",
        "            \"Sharp Claw\": 0.2   # 20% โอกาสดรอป\n",
        "        }\n",
        "    },\n",
        "    \"Orc\": {\n",
        "        \"type\": \"Monster\",\n",
        "        \"item_pool\": {\n",
        "            \"Sword\": 0.4,       # 40% โอกาสดรอป\n",
        "            \"Orc Tooth\": 0.4,    # 40% โอกาสดรอป\n",
        "            \"Attack Potion\": 0.2 # 20% โอกาสดรอป\n",
        "        }\n",
        "    },\n",
        "    \"Minotaur\": {\n",
        "        \"type\": \"Monster\",\n",
        "        \"item_pool\": {\n",
        "            \"Minotaur Horn\": 0.6,  # 60% โอกาสดรอป\n",
        "            \"Magic Crystal\": 0.3,  # 30% โอกาสดรอป\n",
        "            \"Golden Apple\": 0.1    # 10% โอกาสดรอป (ไอเท็มหายาก)\n",
        "        }\n",
        "    },\n",
        "    \"Bandit\": {\n",
        "        \"type\": \"Human\",\n",
        "        \"item_pool\": {\n",
        "            \"Gold Coin\": 0.6,      # 60% โอกาสดรอป\n",
        "            \"Sword\": 0.3,          # 30% โอกาสดรอป\n",
        "            \"Attack Potion\": 0.1   # 10% โอกาสดรอป\n",
        "        }\n",
        "    },\n",
        "    \"Wolf\": {\n",
        "        \"type\": \"Beast\",\n",
        "        \"item_pool\": {\n",
        "            \"Beast Hide\": 0.7,     # 70% โอกาสดรอป\n",
        "            \"Sharp Claw\": 0.2,      # 20% โอกาสดรอป\n",
        "            \"Animal Meat\": 0.1      # 10% โอกาสดรอป\n",
        "        }\n",
        "    }\n",
        "}\n",
        "\n",
        "# สร้าง Dictionary เก็บข้อมูลไอเท็มทั้งหมด\n",
        "items = {\n",
        "    \"Rare Herb\": Item(\"Rare Herb\", \"Healing\", 50, 5),\n",
        "    \"Attack Potion\": Item(\"Attack Potion\", \"Buff\", 10, 3),\n",
        "    \"Magic Crystal\": Item(\"Magic Crystal\", \"Resource\", 0, 10),\n",
        "    \"Sword\": Item(\"Sword\", \"Equipment\", 0, 15),\n",
        "    \"Beast Hide\": Item(\"Beast Hide\", \"Resource\", 0, 8),\n",
        "    \"Sharp Claw\": Item(\"Sharp Claw\", \"Resource\", 0, 5),\n",
        "    \"Animal Meat\": Item(\"Animal Meat\", \"Resource\", 0, 2),\n",
        "    \"Orc Tooth\": Item(\"Orc Tooth\", \"Resource\", 0, 7),\n",
        "    \"Minotaur Horn\": Item(\"Minotaur Horn\", \"Resource\", 0, 12),\n",
        "    \"Golden Apple\": Item(\"Golden Apple\", \"Healing\", 100, 2),  # ไอเท็มหายาก\n",
        "    \"Elixir of Power\": Item(\"Elixir of Power\", \"Buff\", 20, 1)  # ไอเท็มหายาก\n",
        "}\n",
        "\n",
        "def generate_random_enemy(player_level):\n",
        "    \"\"\"สุ่มศัตรูขึ้นมาโดยอัตโนมัติ\"\"\"\n",
        "    enemy_name = random.choice(list(enemy_data.keys()))\n",
        "    enemy_info = enemy_data[enemy_name]\n",
        "    enemy_level = max(1, player_level + random.randint(-5, -1))  # เลเวลศัตรูใกล้เคียงกับผู้เล่น\n",
        "    return Enemy(enemy_name, enemy_level, enemy_info[\"type\"], enemy_info[\"item_pool\"])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### ClassBattleSystem"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 102,
      "metadata": {},
      "outputs": [],
      "source": [
        "class BattleSystem:\n",
        "    def __init__(self, player, enemy):\n",
        "        self.player = player\n",
        "        self.enemy = enemy\n",
        "\n",
        "    def start_battle(self):\n",
        "        print(f\"A wild {self.enemy.name} (Level {self.enemy.level}) appears!\")\n",
        "        while self.player.hp > 0 and self.enemy.is_alive():\n",
        "            # แสดงสถานะผู้เล่นและศัตรู\n",
        "            print(self.player.status)\n",
        "            print(self.enemy)\n",
        "\n",
        "            # ผู้เล่นเลือกการกระทำ\n",
        "            while True:  # ลูปจนกว่าผู้เล่นจะเลือกตัวเลือกที่ถูกต้อง\n",
        "                action = input(\"Choose action: [1] Attack, [2] Use Skill, [3] Use Item, [4] Run: \")\n",
        "                if action in [\"1\", \"2\", \"3\", \"4\"]:  # ตรวจสอบว่าตัวเลือกถูกต้อง\n",
        "                    break\n",
        "                print(\"Invalid choice! Please choose again.\")\n",
        "\n",
        "            if action == \"1\":  # โจมตี\n",
        "                if self.player.use_stamina(5):  # ใช้พลังงาน 5 ในการโจมตี\n",
        "                    damage = self.player.attack_enemy(self.enemy)\n",
        "                    enemy_dead = self.enemy.take_damage(damage)\n",
        "                    if enemy_dead:\n",
        "                        print(f\"{self.enemy.name} has been defeated!\")\n",
        "                        self.player.gold += self.enemy.gold\n",
        "                        self.player.experience += self.enemy.experience\n",
        "                        print(f\"You gained {self.enemy.gold} gold and {self.enemy.experience} experience!\")\n",
        "                        if self.enemy.drops:\n",
        "                            print(f\"The enemy dropped: {self.enemy.drops.name}\")\n",
        "                            self.player.add_item(self.enemy.drops)\n",
        "                        break\n",
        "\n",
        "            elif action == \"2\":  # ใช้สกิล\n",
        "                print(f\"{self.player.name} uses a skill!\")\n",
        "                # สามารถเพิ่มระบบสกิลได้ในอนาคต\n",
        "                print(\"No skills available yet!\")  # ตัวอย่าง placeholder\n",
        "\n",
        "            elif action == \"3\":  # ใช้ไอเท็ม\n",
        "                if self.player.inventory:\n",
        "                    print(\"Available Items:\")\n",
        "                    for i, item in enumerate(self.player.inventory):\n",
        "                        print(f\"[{i + 1}] {item.name}\")\n",
        "                    while True:  # ลูปจนกว่าผู้เล่นจะเลือกไอเท็มหรือยกเลิก\n",
        "                        item_choice = input(\"Choose item to use (or press Enter to cancel): \")\n",
        "                        if item_choice == \"\":  # ยกเลิก\n",
        "                            print(\"Exiting item menu.\")\n",
        "                            break\n",
        "                        elif item_choice.isdigit() and 0 < int(item_choice) <= len(self.player.inventory):\n",
        "                            item = self.player.inventory[int(item_choice) - 1]\n",
        "                            self.player.use_item(item.name)\n",
        "                            break\n",
        "                        else:\n",
        "                            print(\"Invalid choice! Please choose again.\")\n",
        "                else:\n",
        "                    print(\"No items in inventory!\")\n",
        "\n",
        "            elif action == \"4\":  # หนี\n",
        "                if random.random() < 0.5:  # 50% โอกาสหนีสำเร็จ\n",
        "                    print(f\"{self.player.name} successfully ran away!\")\n",
        "                    break\n",
        "                else:\n",
        "                    print(f\"{self.player.name} failed to run away!\")\n",
        "\n",
        "            # ศัตรูโจมตีผู้เล่น\n",
        "            if self.enemy.is_alive():\n",
        "                damage = self.enemy.attack_player(self.player)\n",
        "                player_dead = self.player.take_damage(damage)\n",
        "                if player_dead:\n",
        "                    print(f\"{self.player.name} has been defeated!\")\n",
        "                    break"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### ClassItem"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "metadata": {},
      "outputs": [],
      "source": [
        "class Item:\n",
        "    def __init__(self, name, item_type, effect, weight, price=0):\n",
        "        self.name = name\n",
        "        self.item_type = item_type\n",
        "        self.effect = effect\n",
        "        self.weight = weight\n",
        "        self.price = price\n",
        "\n",
        "class Enemy:\n",
        "    def __init__(self, name, level, enemy_type, item_pool):\n",
        "        # ... (โค้ดเดิม)\n",
        "        self.drops = self.get_random_drop()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### ClassMap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {},
      "outputs": [],
      "source": [
        "class Map:\n",
        "    def __init__(self):\n",
        "        self.areas = []  # รายการพื้นที่ทั้งหมดในแผนที่\n",
        "        self.current_area = None  # พื้นที่ปัจจุบันที่ผู้เล่นอยู่\n",
        "\n",
        "    def move_to_area(self, player, area_name):\n",
        "        \"\"\"ย้ายผู้เล่นไปยังพื้นที่ที่กำหนด\"\"\"\n",
        "        for area in self.areas:\n",
        "            if area.name == area_name:\n",
        "                if player.use_stamina(10):  # ใช้พลังงาน 10 ในการเดินทาง\n",
        "                    self.current_area = area\n",
        "                    player.add_time(1)  # เวลาเพิ่มขึ้น 1 ชั่วโมง\n",
        "                    print(f\"You have entered {area.name}.\")\n",
        "                    print(area.description)\n",
        "                return\n",
        "        print(f\"Area '{area_name}' not found!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### ClassQuest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {},
      "outputs": [],
      "source": [
        "class Quest:\n",
        "    def __init__(self, name, description, objective, reward):\n",
        "        self.name = name\n",
        "        self.description = description\n",
        "        self.objective = objective  # เป้าหมาย (เช่น \"Kill 5 Goblins\")\n",
        "        self.reward = reward  # รางวัล (เช่น {\"gold\": 100, \"exp\": 50, \"item\": \"Rare Herb\"})\n",
        "        self.completed = False\n",
        "\n",
        "    def check_completion(self, player):\n",
        "        \"\"\"ตรวจสอบว่าเควสต์สำเร็จหรือไม่\"\"\"\n",
        "        if self.objective[\"type\"] == \"kill\" and player.killed_enemies.get(self.objective[\"target\"], 0) >= self.objective[\"amount\"]:\n",
        "            self.completed = True\n",
        "        elif self.objective[\"type\"] == \"collect\" and player.inventory.count(self.objective[\"target\"]) >= self.objective[\"amount\"]:\n",
        "            self.completed = True\n",
        "        return self.completed\n",
        "\n",
        "    def claim_reward(self, player):\n",
        "        \"\"\"รับรางวัลจากเควสต์\"\"\"\n",
        "        if self.completed:\n",
        "            player.gold += self.reward.get(\"gold\", 0)\n",
        "            player.experience += self.reward.get(\"exp\", 0)\n",
        "            if \"item\" in self.reward:\n",
        "                player.add_item(items[self.reward[\"item\"]])\n",
        "            print(f\"Quest '{self.name}' completed! Reward: {self.reward}\")\n",
        "        else:\n",
        "            print(\"Quest not completed yet!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# game_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "kim created as Adventurer!\n",
            "************************************************************\n",
            "Name    : kim           | class   : Adventurer\n",
            "HP      :  105 /  105   | Stamina : 85 / 85\n",
            "Mana    :   88 /   88   | Magic Attack : 17\n",
            "Attack  :   14          | Defense : 8\n",
            "Level   :   1           | Exp     : 0 / 100 to level 2\n",
            "Gold    :     100       | Luck    : 7\n",
            "************************************************************\n"
          ]
        },
        {
          "ename": "AttributeError",
          "evalue": "'CharacterAction' object has no attribute 'gold'",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "Cell \u001b[1;32mIn[108], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m player \u001b[38;5;241m=\u001b[39m GameCharacter(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mHero\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m      2\u001b[0m action_system \u001b[38;5;241m=\u001b[39m CharacterAction()\n\u001b[1;32m----> 4\u001b[0m \u001b[43maction_system\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbuy_item\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mHealth Potion\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m50\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      6\u001b[0m enemy \u001b[38;5;241m=\u001b[39m generate_random_enemy(player\u001b[38;5;241m.\u001b[39mlevel)\n\u001b[0;32m      7\u001b[0m battle \u001b[38;5;241m=\u001b[39m BattleSystem(player, enemy)\n",
            "Cell \u001b[1;32mIn[99], line 13\u001b[0m, in \u001b[0;36mCharacterAction.buy_item\u001b[1;34m(self, item, price)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mbuy_item\u001b[39m(\u001b[38;5;28mself\u001b[39m, item, price):\n\u001b[1;32m---> 13\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgold\u001b[49m \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m price:\n\u001b[0;32m     14\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgold \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m=\u001b[39m price\n\u001b[0;32m     15\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39minventory\u001b[38;5;241m.\u001b[39mappend(item)\n",
            "\u001b[1;31mAttributeError\u001b[0m: 'CharacterAction' object has no attribute 'gold'"
          ]
        }
      ],
      "source": [
        "player = GameCharacter(\"Hero\")\n",
        "action_system = CharacterAction()\n",
        "\n",
        "action_system.buy_item(\"Health Potion\", 50)\n",
        "\n",
        "enemy = generate_random_enemy(player.level)\n",
        "battle = BattleSystem(player, enemy)\n",
        "battle.start_battle()\n",
        "\n",
        "# ตรวจสอบสถานะ\n",
        "status = CharacterStatus(player)\n",
        "status.display_status()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "kim leveled up to level 4!\n",
            "kim needs 0 / 195.0 experience to level up again!\n",
            "************************************************************\n",
            "Name    : kim           | class   : Warrior\n",
            "HP      :  105 /  105   | Stamina : 80 / 80\n",
            "Mana    :   74 /   74   | Magic Attack : 14\n",
            "Attack  :   25          | Defense : 12\n",
            "Level   :   1           | Exp     : 0 / 100 to level 2\n",
            "Gold    :     100       | Luck    : 8\n",
            "************************************************************\n"
          ]
        }
      ],
      "source": [
        "level_system.level_up()\n",
        "player.status.display_status()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [
        {
          "ename": "AttributeError",
          "evalue": "'Enemy' object has no attribute 'get_random_drop'",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "Cell \u001b[1;32mIn[91], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m enemy \u001b[38;5;241m=\u001b[39m \u001b[43mgenerate_random_enemy\u001b[49m\u001b[43m(\u001b[49m\u001b[43mplayer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      2\u001b[0m battle \u001b[38;5;241m=\u001b[39m BattleSystem(player, enemy)  \u001b[38;5;66;03m# ส่งพารามิเตอร์ player และ enemy\u001b[39;00m\n\u001b[0;32m      3\u001b[0m battle\u001b[38;5;241m.\u001b[39mstart_battle()\n",
            "Cell \u001b[1;32mIn[84], line 142\u001b[0m, in \u001b[0;36mgenerate_random_enemy\u001b[1;34m(player_level)\u001b[0m\n\u001b[0;32m    140\u001b[0m enemy_info \u001b[38;5;241m=\u001b[39m enemy_data[enemy_name]\n\u001b[0;32m    141\u001b[0m enemy_level \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmax\u001b[39m(\u001b[38;5;241m1\u001b[39m, player_level \u001b[38;5;241m+\u001b[39m random\u001b[38;5;241m.\u001b[39mrandint(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m))  \u001b[38;5;66;03m# เลเวลศัตรูใกล้เคียงกับผู้เล่น\u001b[39;00m\n\u001b[1;32m--> 142\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mEnemy\u001b[49m\u001b[43m(\u001b[49m\u001b[43menemy_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43menemy_level\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43menemy_info\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtype\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43menemy_info\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mitem_pool\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n",
            "Cell \u001b[1;32mIn[86], line 12\u001b[0m, in \u001b[0;36mEnemy.__init__\u001b[1;34m(self, name, level, enemy_type, item_pool)\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, name, level, enemy_type, item_pool):\n\u001b[0;32m     11\u001b[0m     \u001b[38;5;66;03m# ... (โค้ดเดิม)\u001b[39;00m\n\u001b[1;32m---> 12\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdrops \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_random_drop\u001b[49m()\n",
            "\u001b[1;31mAttributeError\u001b[0m: 'Enemy' object has no attribute 'get_random_drop'"
          ]
        }
      ],
      "source": [
        "enemy = generate_random_enemy(player.level)\n",
        "battle = BattleSystem(player, enemy)  # ส่งพารามิเตอร์ player และ enemy\n",
        "battle.start_battle()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
